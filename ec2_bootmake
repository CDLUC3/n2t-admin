#!/usr/bin/env bash


# XXX don't enable crontab until after first system rollout!!

[[ -f ~/.bashrc ]] &&
	source ~/.bashrc	# which might not exist yet

set -u			# now make the use of unset variables throw an error
home=/apps/n2t			# XXX bad idea to change this
gtcf=$home/.gitconfig
envsh=warts/env.sh
fakeuser=samsmith

cmd=${1:-}
shift
if [[ "$cmd" != init && "$cmd" != config && "$cmd" != realclean &&
	"$cmd" != build && "$cmd" != install && "$cmd" != httpd ]]
then
	cat << EOT
Usage: $0 [ init | config | httpd [ new ] | build | install | realclean ]

# XXX what to do with passwords? add IA password only?

Use these instructions and script to set up N2T on a new AWS EC2 instance.
Pick any name of the user role account that will administer the service,
AS LONG AS IT'S n2t and the home directory is /apps/n2t (yes, limiting).
Start by assuming the identity of the user,

   \$ sudo su - n2t

and making sure you're in n2t's home directory. The next step sets up what's
needed to do yum installs and to create shell startup and other foundation
files. Answer the questions asked by running

      $0 init

and follow the instructions below, as well as any printed by this script.

  1.  Verify that you have correct values for name and email inside
      your ~/.gitconfig file.

  2.  If you're planning to update the code on github, add your instance's
      ssh key to github.com.

  3.  XXX Copy ~/warts/.pswdfile.n2t from another host, eg,

        scp -p n2t-dev.n2t.net:warts/.pswdfile.n2t ~/warts/

  4.  Make sure that your system people have put your web server certs
      file into a ~/ssl/YYYY-MM-DD directory, and match the cert filename
      assignments in ~/$envsh to the correct files.

This next step takes several minutes: run (interactively, don't background)

      $0 config

If your system doesn't need to reboot, it's a good idea to logout and login
again to make sure the startup files are working. Then do

      $0 build

If over time a system patch updates apache, you'll do this again (as it
actually calls "$0 httpd" to re-import the system apache.

Now logout and login again. Then run

      $0 install

Finally have your system people install ~/n2t_create/n2t.service with
systemd so that the service comes up and shuts down properly during system
reboots.  You'll also want to have web service monitoring set up, eg, Nagios.
Occasionally, run "$0 httpd" to rebuild from newly patched Apache server.

To start over and prepare for an "init" on a clean system, do

      $0 realclean

EOT
	exit
fi

function ec2_init {

	local hostname class mailto def_hostname def_class def_mailto
	local p		# prompt strings

	def_hostname=$( hostname -f )
	def_class=loc
	def_mailto='samsmith at example dot org'	# use wrong syntax
		# to trigger downstream external warnings if set to default

	# get $hostname
	read -t 60 -p "Enter hostname (default $def_hostname): " hostname || {
		echo Error: the hostname must be defined 1>&2
		return 1
	}
	local h=$( sed 's/  *//g' <<< "$hostname" )
	if [[ ! "$h" ]]			# if no nonblank
	then
		hostname="$def_hostname"
	else
		hostname="$h"
	fi

	p="Enter service class: [loc(default)|dev|stg|prd] "
	read -t 60 -p "$p" class || {
	       echo Error: the service class must be defined 1>&2
	       return 1
	}
	[[ "$class" ]] ||
	       class="$def_class"
	case "$class" in
	loc|dev|stg|prd) ;;
	*)     echo Error: service class must be one of \
			       loc, dev, stg, or prd 1>&2
	       return 1 ;;
	esac

	p="Enter email address for system notifications: "
	read -t 60 -p "$p" mailto || {
		echo Error: the service mailto must be defined 1>&2
		return 1
	}
	[[ "$mailto" ]] ||
		mailto="$def_mailto"

	local create=
	if [[ -e "$envsh" ]]
	then
		p="Backup and overwrite existing $envsh file? "
			p+="[y/n] (default no): "
		read -t 60 -p "$p" || {
			echo Error: response required 1>&2
			return 1
		}
		[[ "$REPLY" =~ ^[yY] ]] && {
			create=yes
			echo ok, keeping existing file
		}
	else
		create=yes
	fi

	# If we get here, we're committed to actual filesystem mods.
	mkdir -p ssl warts/ssl

        [[ ! -e ~/.ssh/id_rsa.pub ]] && {
		echo OK to answer the next few questions with defaults.
		ssh-keygen -t rsa         # enter no filename, no passphrase
	}
	echo This is your public key for copy/paste into github.
	cat ~/.ssh/id_rsa.pub

	[[ -e $gtcf ]] || {
		echo creating generic $gtcf '<---' edit this change user names
		cat > $gtcf << EOT

[ui]
# EDIT name AND email LINES
[user]
	name = Sam Smith
	email = 105020+$fakeuser@users.noreply.github.com
[push]
	default = simple

EOT
	}

	[[ "$create" ]] && {			# create $envsh
		[[ -e "$envsh" ]] &&
			cp -p "$envsh" "$envsh.bak"
		cat > $envsh << EOT
#!/bin/sh

# This shell script sets some instance-specific environment variables.
# The build_server_tree script (from the eggnog source code) reads these
# for host and certificate configuration. The EGNAPA_HOST_CLASS here should
# match what is in the eggnog_conf file; this copy is (cached) for speed
# and it helps bootstrapping the first service rollout.

export EGNAPA_HOST=$hostname
export EGNAPA_HOST_CLASS=$class		# eg, one of dev, stg, prd, loc

# Define fullpaths to the certificate files. Use EGNAPA_SSL_CERTFILE for
# the main certificate and EGNAPA_SSL_KEYFILE for the pirviate key.

ssldir=$home/warts/ssl/n2t.net
# see \$ssldir/README for file choices
export EGNAPA_SSL_CERTFILE=\$ssldir/fullchain.pem
export EGNAPA_SSL_KEYFILE=\$ssldir/privkey.pem

# Define email address to receive system notifications, eg, from crontab.
export EGNAPA_MAILTO='$mailto'

EOT

		cp -pr ~/ssl ~/warts/
		echo Created $envsh -- done.
		#now you must copy your cert files, eg, \
		#	from ssl/2022-03-30/* to warts/ssl/
	}
	return 0
}

# All we need to do is the minimum to bring up Apache successfully,
# since we'll overwrite most inherited configuration. However, these
# snapshot copies we make here will be incorporated over and over
# when the n2t/eggnog instance is rebuilt (very frequent operation).

# XXX after system patch, check for new files and re-snapshot!!

# Give first arg as "new" (default "cur") to install in ~/sv/new

function do_apache_httpd24 {

	local sysap=/etc/httpd		# system apache
	local aptop=~/sv/${1:-cur}/apache2
	echo Running do_apache_httpd24 in $aptop.

	rm -fr $aptop
	mkdir $aptop

	cd $aptop			# where we copy stuff to

	mkdir -p bin cgi-bin htdocs logs var/run
	cp /usr/sbin/httpd bin/httpd
	cp -Lpr $sysap/modules .
	cp -pr $sysap/conf.modules.d .	# keep these verbatim,
		# eg, /etc/httpd/conf.modules.d/00-base.conf; later we'll
		# override selectively via build_server_tree, eg, 00-ssl.conf
	cp -pr $sysap/conf .
 	cp $sysap/conf/magic conf/
	cp /etc/mime.types conf/
	cp -pr /etc/httpd/conf.d .	# later build_server_tree removes these
	mv conf.d/ssl.conf{,.noop}	# disable SSL so we come up w.o. certs
	cp /etc/httpd/conf/httpd.conf conf/httpd.conf.sys	# one-time save
	perl -pE '/^(Server|Document)Root/ and s/^/#/;
		/^Listen/ and s/.*/Listen 18880/' conf/httpd.conf.sys \
		> conf/httpd.conf
	cat >> conf/httpd.conf << EOT

PidFile $aptop/var/run/httpd.pid
DefaultRuntimeDir $aptop/var/run
EOT
	cat > README << EOT
This README file and the foundation structure of the enclosing directory
were created from scratch by the ec2_bootmake script. This directory supports
a public-facing Eggnog server on this host, as well as test servers.

The part of its structure that survives repeated rebuilding of the public
and test servers mirrors the system-installed Apache HTTPD 2.4 server.
Eggnog doesn't use all the directory structure (eg, conf.d/*), and rebuilds
just those parts it needs.
EOT

# # xxx drop these?
# 	ln -s /usr/sbin/httpd bin/httpd			# yyy needed?
# 	ln -s /etc/mime.types conf/mime.types
# 	ln -s $sysap/modules modules
# 	ln -s $sysap/conf/magic conf/magic
# 	ln -s $sysap/conf.modules.d conf.modules.d	# keep these verbatim,
# 		# eg, /etc/httpd/conf.modules.d/00-base.conf; later we'll
# 		# override selectively via build_server_tree, eg, 00-ssl.conf
# 
# 	cp /etc/httpd/conf.d/* conf.d	# later build_server_tree removes these
# 				# xxx but are they even needed to start?
# 	cp /etc/httpd/conf/httpd.conf conf/httpd.conf.sys	# one-time save
# 	perl -pE '/^(Server|Document)Root/ and s/^/#/;
# 		/^Listen/ and s/.*/Listen 18880/' conf/httpd.conf.sys \
# 		> conf/httpd.conf
# 	cat >> conf/httpd.conf << EOT
# 
# PidFile $aptop/var/run/httpd.pid
# DefaultRuntimeDir $aptop/var/run
# EOT
# 	rm  conf.d/ssl.conf		# disable SSL stuff for now
# 	#cp conf.d/ssl.conf conf.d/ssl.conf.sys
# 	#perl -pE '/^SSLCert/ and s/^/#/;
# 	#	/^Listen/ and s/.*/Listen 18443/' conf.d/ssl.conf.sys \
# 	#		> conf.d/ssl.conf
}

[[ "$cmd" == httpd ]] && {
	do_apache_httpd24 "$@"
	exit
}

[[ "$cmd" == init ]] && {
	ec2_init
	exit
}

[[ "$cmd" == realclean ]] && {
	cd ~
	rm -fr \
		README backups/ batches/ binders \
		init.d/ local/ logs/ minters \
		n2t_create/ pfx_harvest/ sv/ warts/README \
		.cpanm/ .eggnog/ .cache/ \
		.bashrc .bash_profile .vimrc .svudef

	sudo yum -y group erase "Development Tools"
	sudo yum -y group erase "Web Server"
	sudo yum -y erase mod_ssl libdb git
	sudo yum -y erase 'perl(DB_File)'
	sudo yum -y erase 'perl(BerkeleyDB)'
	sudo yum -y erase 'perl(Data::UUID)' 'perl(Test::More)'
	sudo yum -y erase 'perl(Time::HiRes)'
	sudo yum -y erase 'perl(Try::Tiny)'
	sudo yum -y erase 'perl(Safe::Isa)'
	sudo yum -y erase 'perl(Log::Log4perl)'
	sudo yum -y erase 'perl(XML::LibXML)' 'perl(XML::LibXSLT)'
	sudo yum -y erase 'perl(App::cpanminus)'
	sudo yum -y erase 'perl(CGI)'
	sudo yum -y erase python3		# for transition
	sudo yum -y erase jq			# for Internet Archive API
	#sudo yum -y erase golang		# nice, but not essential
	#sudo yum -y erase htop
	#sudo yum -y erase glances
	#sudo amazon-linux-extras erase -y vim
	#sudo amazon-linux-extras erase -y postgresql11
	# XXX not removing .gitconfig
	echo
	echo Now logout and login again. If lots of system updates occurred, you should reboot first.
	echo
	exit
}

source ~/warts/env.sh

# If we get get here, $cmd was "go", so full steam ahead.
# yyy ask for more info to get $gtcf correct with init

grep "email.*$fakeuser" $gtcf && {
	echo "Error: you first need to edit values in $gtcf"
	exit 1
}

[[ "$cmd" == config ]] && {
	# I I check into whether to use installonlypkgs; from "man yum.conf":
	#   "installonlypkgs=<space separated list of packages>
	#      Here you can provide a space-separated list of packages which
	#      yum can install, but will never update."

	sudo yum -y update			# update to latest OS version
	sudo amazon-linux-extras install -y epel	# to get more packages
				# eg, perl(BerkeleyDB), perl(Log::Log4perl)

	# To browse so-called "package groups", do "yum group list ids".
	# yyy check return status?
	#sudo yum -y group install "Development Libraries"
	sudo yum -y group install "Development Tools"   # gcc
	sudo yum -y group install "Web Server"    	# yyy needed?

	#sudo yum -y install libdb4	# version 4 (v5 is default)
	#sudo yum -y install libdb4-devel	# /usr/include/libdb4/db.h and
						# /usr/lib64/libdb4/libdb.so
	#sudo yum -y install libdb4-util		# plus db4_* CLI tools

	sudo yum -y install mod_ssl
	sudo yum -y install libdb		# linux2 v5 is default
	sudo yum -y install git
	sudo yum -y install 'perl(DB_File)'	# used by, eg, admegn mload
	sudo yum -y install 'perl(BerkeleyDB)'
	sudo yum -y install 'perl(Data::UUID)' 'perl(Test::More)'
	sudo yum -y install 'perl(Time::HiRes)'
	sudo yum -y install 'perl(Try::Tiny)'
	sudo yum -y install 'perl(Safe::Isa)'
	sudo yum -y install 'perl(boolean)'
	sudo yum -y install 'perl(CGI)'

	# yyy why not install better version with cpanm?
	sudo yum -y install 'perl(Log::Log4perl)'

# xxx when system comes up, even partially, crontab is off and spewing
#     error messages a little too easily --  how to stop?

	# XML to parse and format XML blobs for inflection support
	sudo yum -y install 'perl(XML::LibXML)' 'perl(XML::LibXSLT)'
	sudo yum -y install 'perl(App::cpanminus)'
	sudo yum -y install python3		# for transition
	sudo yum -y install jq			# for Internet Archive API
	#sudo yum -y install golang		# nice, but not essential
	#sudo yum -y install htop		# monitoring tool
	#sudo yum -y install glances		# monitoring tool
	sudo amazon-linux-extras install -y vim	# nice, but not essential
	#sudo amazon-linux-extras install -y postgresql11

	cd		# go to home directory
	#git clone git@github.com:jkunze/n2t-admin.git
	git clone https://github.com/jkunze/n2t-admin.git
	rm -fr n2t_create	# if it exists the rename below won't work
	mv n2t-admin n2t_create		# simple rename
	cd n2t_create
	make			# sets up .bashrc and svu defs; runs "svu init"
	# sets up of crontab, which we need to disable for now
	crontab /dev/null
	echo "Disabling crontab for now. Re-enable with (cd n2t_create; make)"
		# XXX do not background or redirect, since it asks questions!
	echo
	echo Now logout and login again.
	echo

	exit
} # end of config

# XXXX stop here, and make the user do source and svu
#set +u			# cannot count on .bashrc to be squeaky clean
#source ~/.bashrc	# so we can do svu new
#svu new
#set -u

[[ "$cmd" == build ]] && {

	# XXXX resume script here
	#./make_instance build mongodb_pm httpd n2t > berrs 2>&1
	# NB: ./make_instance requires "svu new", where installs go
	#./make_instance build mongodb_pm n2t > berrs 2>&1 || {

# XXX make user do svu new?
	svu new || {
		echo Bailing
		exit 1
	}
	echo -n "SVU status, pre-make_instance: " ; svu status

# XXX script takes over here
	echo Creating bare-bones apache server.
	do_apache_httpd24 new 	# copy and modify system version just
				# enough to let us start a server

	cd ~/n2t_create || {    # go back to build directory
		echo Bailing
		exit 1
	}

	echo 'Running ./make_instance build ..., output in "make_instance_errs"'
	#./make_instance build mongodb_pm n2t > make_instance_errs 2>&1 || {
# XXX do some prefix harvesting before this!
	./make_instance build n2t > make_instance_errs 2>&1 || {
		echo make_instance error -- bailing
		svu cur
		exit 1
	}
	echo 'Finished ./make_instance build ..."'
	echo -n "SVU status, pre-svu-rollout: " ; svu status

# XXX make user do svu rollout?
	# now make installed stuff "current" (what was "new" will be "cur")
	svu rollout	# ok as no users yet; this puts everything of interest
			# under the 'cur' version, our default logged-in state
	echo done svu rollout
	echo
	echo Important: now logout and login again
	echo
}

[[ "$cmd" == install ]] && {

	#svu cur	# make sure we're on current version before n2t rollout
	#echo -n "SVU status, pre-n2t-rollout: " ; svu status

	echo n2t rollout
	n2t rollout	# takes care of dvcsid test

	# yyy chicken & egg problem(?) with rollout, which depends on prefixes.
	#     seems we might need to run "pfx hitrnt" before rollout?, but we
	#     can't do that before we've rolled things out the first time
	#     (or can we?)
# XXX harvest files have come in before the 'make all' implied above
# XXX and the below won't work until rollout,? because... why?
#     since $sa/prefixes isn't in place?
	#pfx hitrnt	# 2nd time might work? XXX
	#n2t rollout

	echo n2t test
	n2t test		# test that things are more or less ok

	#echo 'Now grab and install warts/.pswdfile.n2t from another system.'

	#### IMPORTANT!
	cat << EOT
Ask your superuser:
Please copy ~/n2t_create/apache.n2t to /etc/init.d/apache.n2t and set up chkconfig so that the N2T service comes up on machine (re)boot.

When ready, adjust eggnog_conf values to turn on crontab for things like
prefix harvesting, error checks, backups, etc.

When all is stable, arrange for Nagios web service monitoring.

To switch between two main utility directories, use "cd $sn; pd $se".

EOT
	exit
}

[[ "$cmd" == oldbuild ]] && {

	# XXXX resume script here
	#./make_instance build mongodb_pm httpd n2t > berrs 2>&1
	# NB: ./make_instance requires "svu new", where installs go
	#./make_instance build mongodb_pm n2t > berrs 2>&1 || {

# XXX make user do svu new?
	svu new || {
		echo Bailing
		exit 1
	}
	echo -n "SVU status, pre-make_instance: " ; svu status

# XXX script takes over here
	echo Creating bare-bones apache server.
	do_apache_httpd24 new 	# copy and modify system version just
				# enough to let us start a server

	cd ~/n2t_create || {    # go back to build directory
		echo Bailing
		exit 1
	}
	echo 'Running ./make_instance build ..., output in "make_instance_errs"'
	#./make_instance build mongodb_pm n2t > make_instance_errs 2>&1 || {
# XXX do some prefix harvesting before this!
	./make_instance build n2t > make_instance_errs 2>&1 || {
		echo make_instance error -- bailing
		svu cur
		exit 1
	}
	echo 'Finished ./make_instance build ..."'
	echo -n "SVU status, pre-svu-rollout: " ; svu status

# XXX make user do svu rollout?
	# now make installed stuff "current" (what was "new" will be "cur")
	# ok as no users yet; this puts everything of interest
	# under the 'cur' version, our default logged-in state
	svu rollout || {
		echo Bailing: svu rollout failed
		exit 1
	}
	echo done svu rollout

	svu cur	|| {	# make sure we're on current version before n2t rollout
		echo Bailing: svu cur failed
		exit 1
	}
	echo -n "SVU status, pre-n2t-rollout: " ; svu status

	n2t rollout || {		# takes care of dvcsid test
		echo Bailing: n2t rollout failed
		exit 1
	}

	# yyy chicken & egg problem(?) with rollout, which depends on prefixes.
	#     seems we might need to run "pfx hitrnt" before rollout?, but we
	#     can't do that before we've rolled things out the first time
	#     (or can we?)
# XXX harvest files have come in before the 'make all' implied above
# XXX and the below won't work until rollout,? because... why?
#     since $sa/prefixes isn't in place?
	#pfx hitrnt	# 2nd time might work? XXX
	#n2t rollout

	n2t test		# test that things are more or less ok

	#echo 'Now grab and install warts/.pswdfile.n2t from another system.'

	#### IMPORTANT!
	cat << EOT
Ask your superuser:
Please copy ~/n2t_create/apache.n2t to /etc/init.d/apache.n2t and set up chkconfig so that the N2T service comes up on machine (re)boot.

When ready, adjust eggnog_conf values to turn on crontab for things like
prefix harvesting, error checks, backups, etc.

When all is stable, arrange for Nagios web service monitoring.

To switch between two main utility directories, use "cd $sn; pd $se".

EOT
	exit
}
